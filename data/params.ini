; This is a cosmic shear only version of des-y3.ini
; It is broadly the same but removes all the calculations
; related to galaxy density and galaxy-galaxy lensing
[runtime]
sampler = apriori
verbosity = standard
root = ${CSL_DIR}

; This parameter is used several times in this file, so is
; put in the DEFAULT section and is referenced below as %(2PT_FILE)s
[DEFAULT]
2PT_FILE = ${PWD}/data/${RUN_NAME}raw_sacc.sacc

[pipeline]
modules =  consistency  camb  sacc_nz  pk_to_cl  lae_sacc_like
timing=F
debug=F
priors = data/priors.ini
values = data/values.ini
extra_output = cosmological_parameters/sigma_8  data_vector/2pt_chi2


; It's worth switching this to T when sampling using multinest, polychord,
; or other samplers that can take advantage of differences in calculation speeds between
; different parameters.
fast_slow = F
first_fast_module =
; For some use cases this might be faster:
;first_fast_module=lens_photoz_width

[apriori]
nsample = 100

[nautilus]
n_live = 25

[star]
nsample_dimension = 21

[maxlike]
max_posterior = T

[output]
filename = output/chain.txt
format=text

; you can set this to T if you don't want 
privacy = F

[emcee]
walkers = 80
samples = 10000
nsteps = 5


; This sampler makes a 1D likelihood slice in each dimension
; It's handy for doing a thorough comparison to other codes
[star]
nsample_dimension = 20

[test]
save_dir=output/test
fatal_errors=T


[consistency]
file = utility/consistency/consistency_interface.py

[camb]
file = boltzmann/camb/camb_interface.py
mode = power
lmax = 2500          ;max ell to use for cmb calculation
feedback=0         ;amount of output to print
AccuracyBoost=1.1 ;CAMB accuracy boost parameter
do_tensors = T
do_lensing = T
NonLinear = pk
halofit_version = takahashi
zmin_background = 0.
zmax_background = 4.
nz_background = 401
kmin=1e-4
kmax = 50.0
kmax_extrapolate = 500.0
nk=700


[source_photoz_bias]
file = number_density/photoz_bias/photoz_bias.py
mode = additive
sample = nz_source
bias_section = wl_photoz_errors
interpolation = linear


[pk_to_cl]
file = structure/projection/project_2d.py
ell_min_logspaced = 0.1
ell_max_logspaced = 5.0e5
n_ell_logspaced = 100 
shear-shear = source-source
verbose = F
get_kernel_peaks = F
sig_over_dchi = 20. 
shear_kernel_dchi = 10. 

[sacc_nz]
file = number_density/load_nz_sacc/load_nz_sacc.py
nz_file = %(2PT_FILE)s
data_sets = source
prefix_section = T


; This can be used to simulate a data vector from a pipeline
[lae_sacc_like]
file = ${PWD}/nz_vae/lae_cosmosis_module.py
data_file = %(2PT_FILE)s
data_sets = all
; save_theory = data/baseline.sacc
;save_realization = output/baseline-realisation.fits

%include data/scale_cuts.ini